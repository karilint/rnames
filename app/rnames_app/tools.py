from .utils.pbdb_import import pbdb_import
from . import models
from django.db import connection
import pandas as pd
import numpy as np
import re

def create_references(references_map, references_df):
	for index, row in references_df.iterrows():
		doi = ''

		if isinstance(row['doi'], str):
			doi = row['doi']

		ref = models.Reference.objects.filter(title=row['title'], year=row['year'])

		if ref.exists():
			reference = ref[0]
		else:
			reference = models.Reference(
				first_author=row['first_author'],
				year=row['year'],
				title=row['title'],
				doi=doi,
			)
			reference.full_clean()
			reference.save()

		references_map[row['id']] = reference

def create_structured_names(structured_names_df):
	for index, row in structured_names_df.iterrows():
		name = models.Name.objects.get_or_create(name=row['name'])[0]
		location = models.Location.objects.get_or_create(name=row['location'])[0]

		qualifier = models.Qualifier.objects.filter(qualifier_name__name=row['qualifier_name'])
		if not qualifier.exists():
			raise Exception('No matching qualifier for ' + row['qualifier_name'])
		else:
			qualifier = qualifier[0]

		structured_name = models.StructuredName.objects.filter(name=name, location=location, qualifier=qualifier)
		if not structured_name.exists():
			structured_name = models.StructuredName(name=name, location=location, qualifier=qualifier, remarks='Autogenerated by PBDB importer.')
			structured_name.full_clean()
			structured_name.save()
			print('Created structured name ' + str(structured_name))

def create_relations(references_map, relations_df):
	for index, row in relations_df.iterrows():
		name_one = models.StructuredName.objects.get(
			name__name=row['Name_one'],
			location__name=row['Location_one'],
			qualifier__qualifier_name__name=row['Qualifier_one']
		)

		name_two = models.StructuredName.objects.get(
			name__name=row['Name_two'],
			location__name=row['Location_two'],
			qualifier__qualifier_name__name=row['Qualifier_two']
		)

		if row['Relation'] == 'belongs to':
			belongs_to = 1
		else:
			belongs_to = 0

		for ref_id in row['Reference']:
			reference = references_map[ref_id]
			relation = models.Relation.objects.get_or_create(
				name_one=name_one,
				name_two=name_two,
				belongs_to=belongs_to,
				reference=reference
			)
			created = relation[1]
			relation = relation[0]

			relation.belongs_to = belongs_to
			relation.save()
			if created:
				print('Created relation ' + str(relation))


def paleobiology_database_import():
	print('Starting pbdb import')

	country_codes_df = pd.DataFrame(list(models.CountryCode.objects.all().values('iso3166_1_alpha_2', 'official_name_en' ,'region_name')))
	country_codes_df.rename(inplace=True, columns={'iso3166_1_alpha_2': 'ISO3166-1-Alpha-2', 'region_name': 'Region Name'})
	data = pbdb_import(country_codes_df)

	connection.connect()

	references_map = {}
	print('Creating references')
	create_references(references_map, data['references'])
	print('Finished creating references')

	print('Creating structured names')
	create_structured_names(data['structured_names'])
	print('Finished creating structured names')

	print('Creating relations')
	create_relations(references_map, data['relations'])
	print('Finished creating relations')

	print('Finished importing Paleobiology Database')